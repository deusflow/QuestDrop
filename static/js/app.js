// –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let workers = []; // –†–∞–±–æ—Ç–Ω–∏–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —ÅGo —Å–µ—Ä–≤–µ—Ä–æ–º)
let tasks = [];   // –ó–∞–¥–∞–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —ÅGo —Å–µ—Ä–≤–µ—Ä–æ–º)

// ============ –ü–û–õ–£–ß–ï–ù–ò–ï DOM –≠–õ–ï–ú–ï–ù–¢–û–í ============
const workerNameInput = document.getElementById('worker-name');
const addWorkerBtn = document.getElementById('add-worker');
const workersListDiv = document.getElementById('workers-list');

const taskNameInput = document.getElementById('task-name');
const addTaskBtn = document.getElementById('add-task');
const tasksListDiv = document.getElementById('tasks-list');

const distributeBtn = document.getElementById('distribute-tasks');
const resultsDiv = document.getElementById('results');

// ============ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
function loadWorkers() {
    fetch('/api/workers')
        .then(response => response.json())
        .then(data => {
            workers = data || [];  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            renderWorkersList();   // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        })
        .catch(error => {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
function loadTasks() {
    fetch('/api/tasks')
        .then(response => response.json())
        .then(data => {
            tasks = data || [];  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π
            renderTasksList();   // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        })
        .catch(error => {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        });
}


// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
function addWorker() {
    const name = workerNameInput.value.trim();
    
    if (name === '') {
        alert('Please enter worker name!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ Go —Å–µ—Ä–≤–µ—Ä
    fetch('/api/workers', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({name: name})
    })
    .then(response => response.json())
    .then(worker => {
        workerNameInput.value = '';  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        loadWorkers();              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    })
    .catch(error => {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function addTask() {
    const description = taskNameInput.value.trim();
    
    if (description === '') {
        alert('Please enter task description!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ Go —Å–µ—Ä–≤–µ—Ä
    fetch('/api/tasks', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({description: description})
    })
    .then(response => response.json())
    .then(task => {
        taskNameInput.value = '';
        loadTasks();
    })
    .catch(error => {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!');
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤ HTML
function renderWorkersList() {
    workersListDiv.innerHTML = '';

    workers.forEach((worker, index) => {
        const workerDiv = document.createElement('div');
        workerDiv.className = 'list-item';
        const workerName = typeof worker === 'string' ? worker : worker.name;
        workerDiv.innerHTML = `
            <span>üë§ ${workerName}</span>
            <button onclick="removeWorker(${index})" style="float: right; background: none; border: none; cursor: pointer;">‚ùå</button>
        `;
        workersListDiv.appendChild(workerDiv);
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ HTML
function renderTasksList() {
    tasksListDiv.innerHTML = '';

    tasks.forEach((task, index) => {
        const taskDiv = document.createElement('div');
        taskDiv.className = 'list-item';
        taskDiv.innerHTML = `
            <span>üìã ${typeof task === 'string' ? task : task.description}</span>
            <button onclick="removeTask(${index})" style="float: right; background: none; border: none; cursor: pointer;">‚ùå</button>
        `;
        tasksListDiv.appendChild(taskDiv);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤)
function removeWorker(index) {
    // –ü–æ–ª—É—á–∞–µ–º id —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    const worker = workers[index];
    if (!worker || typeof worker.id === 'undefined') {
        alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫!');
        return;
    }
    const id = worker.id;
    fetch(`/api/workers/${id}`, { method: 'DELETE' })
        .then(response => {
            if (response.ok) {
                loadWorkers(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            } else {
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!');
            }
        })
        .catch(() => alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!'));
}

function removeTask(index) {
    // –ü–æ–ª—É—á–∞–µ–º id –∑–∞–¥–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É
    const task = tasks[index];
    if (!task || typeof task.id === 'undefined') {
        alert('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ!');
        return;
    }
    const id = task.id;
    fetch(`/api/tasks/${id}`, { method: 'DELETE' })
        .then(response => {
            if (response.ok) {
                loadTasks(); // –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            } else {
                alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!');
            }
        })
        .catch(() => alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!'));
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
function displayResults(results) {
    resultsDiv.innerHTML = '';
    if (results.length === 0) {
        resultsDiv.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p>';
        return;
    }
    resultsDiv.innerHTML =`
  <div class="results-header">
    <span class="results-icon"></span>
    <span class="results-title-text">Outcome of the distribution:</span>
  </div>
  <ul class="results-list"></ul>
`;
    const resultsList = resultsDiv.querySelector('.results-list');
    results.forEach(result => {
        const li = document.createElement('li');
        li.className = 'list-item result-item';
        li.innerHTML = `
    <h4 class="result-worker">üë§ ${result.worker_name}</h4>
    <p><strong>Tasks: ${result.tasks.length}</strong></p>
    <ul class="result-tasks">
      ${result.tasks.map(task => `<li>${task}</li>`).join('')}
    </ul>
  `;
        resultsList.appendChild(li);
    });
}

// –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –∫–ª–∞—Å—Å AdvancedSakuraPetals –Ω–∞ —ç—Ç–æ—Ç:
class AdvancedSakuraPetals {
    constructor() {
        this.container = this.createContainer();
        this.petals = [];
        this.maxPetals = 15;
        this.lastMouseTime = 0;
        this.isEnabled = true; // –ù–û–í–û–ï –°–í–û–ô–°–¢–í–û - –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ª–µ–ø–µ—Å—Ç–∫–∏

        this.initMouseTracking();
        this.initToggleButton(); // –ù–û–í–´–ô –ú–ï–¢–û–î
    }

    createContainer() {
        const container = document.createElement('div');
        container.className = 'sakura-petals';
        document.body.appendChild(container);
        return container;
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    initToggleButton() {
        const toggleBtn = document.getElementById('sakura-toggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.togglePetals();
            });
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–ø–µ—Å—Ç–∫–æ–≤
    togglePetals() {
        this.isEnabled = !this.isEnabled;
        const toggleBtn = document.getElementById('sakura-toggle');

        if (this.isEnabled) {
            // –í–∫–ª—é—á–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
            toggleBtn.classList.remove('disabled');
            toggleBtn.textContent = 'üå∏';
            toggleBtn.title = '–í—ã–∫–ª—é—á–∏—Ç—å –ª–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã';
            console.log('üå∏ –õ–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã');
        } else {
            // –í—ã–∫–ª—é—á–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
            toggleBtn.classList.add('disabled');
            toggleBtn.textContent = 'üö´';
            toggleBtn.title = '–í–∫–ª—é—á–∏—Ç—å –ª–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã';
            this.clearAllPetals(); // —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–µ–ø–µ—Å—Ç–∫–∏
            console.log('üö´ –õ–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã');
        }
    }

    // –ù–û–í–´–ô –ú–ï–¢–û–î - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–µ–ø–µ—Å—Ç–∫–æ–≤
    clearAllPetals() {
        this.petals.forEach(petal => {
            if (petal && petal.parentNode) {
                petal.parentNode.removeChild(petal);
            }
        });
        this.petals = [];
    }

    initMouseTracking() {
        document.addEventListener('mousemove', (e) => {
            // –ü–†–û–í–ï–†–Ø–ï–ú, –í–ö–õ–Æ–ß–ï–ù–´ –õ–ò –õ–ï–ü–ï–°–¢–ö–ò
            if (!this.isEnabled) return;

            const now = Date.now();
            if (now - this.lastMouseTime > 80) {
                this.createPetal(e.clientX, e.clientY);
                this.lastMouseTime = now;
            }
        });
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –ª–µ–ø–µ—Å—Ç–∫–∞ (—Ç–µ–ø–µ—Ä—å —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π)
    createPetal(x, y) {
        if (!this.isEnabled) return;
        if (this.petals.length >= this.maxPetals) return;

        // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏
        const images = [
            '/images/Sakura/SAKURA.png',
            '/images/Sakura/SAKURA2.png',
            '/images/Sakura/SAKURA3.png',
            '/images/Sakura/SAKURA4.png'
        ];
        const imgSrc = images[Math.floor(Math.random() * images.length)];

        // –°–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –¥–ª—è —Ä–∞–∑–º–µ—Ä–∞/—Ñ–æ—Ä–º—ã
        const type = 'type-' + (1 + Math.floor(Math.random() * 4));

        const petal = document.createElement('img');
        petal.src = imgSrc;
        petal.alt = 'sakura';
        petal.draggable = false;
        petal.className = `sakura-petal ${type}`;
        petal.style.left = x + 'px';
        petal.style.top = y + 'px';
        petal.style.pointerEvents = 'none';
        petal.style.userSelect = 'none';
        // –°–ª—É—á–∞–π–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        const duration = 2.8 + Math.random() * 2.2;
        petal.style.animationDuration = duration + 's';
        petal.style.setProperty('--final-x', (Math.random() * 120 - 60) + 'px');
        petal.style.setProperty('--final-y', (80 + Math.random() * 120) + 'px');

        this.container.appendChild(petal);
        this.petals.push(petal);

        petal.addEventListener('animationend', () => {
            this.container.removeChild(petal);
            this.petals = this.petals.filter(p => p !== petal);
        });
    }
}




// ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ============
// –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ DOMContentLoaded –Ω–∞ –æ–¥–∏–Ω:
document.addEventListener('DOMContentLoaded', function() {
    // üå∏ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–ï–ü–ï–°–¢–ö–û–í –°–ê–ö–£–†–´
    new AdvancedSakuraPetals();

    // üìù –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–ß–ê–¢–ùÔøΩÔøΩ–ô –ú–ê–®–ò–ù–ö–ò
    const subtitle = document.getElementById('typing-subtitle');
    if (subtitle) {
        const text = subtitle.textContent;
        subtitle.innerHTML = '';
        subtitle.classList.add('typing');

        text.split('').forEach((char, index) => {
            const span = document.createElement('span');
            span.textContent = char === ' ' ? '\u00A0' : char;
            span.className = 'letter';
            span.style.animationDelay = `${index * 80}ms`;
            subtitle.appendChild(span);
        });

        setTimeout(() => {
            subtitle.classList.remove('typing');
        }, text.length * 80 + 1000);
    }

    // üîÑ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    loadWorkers();
    loadTasks();

    // üîò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
    if (addWorkerBtn) addWorkerBtn.addEventListener('click', addWorker);
    if (addTaskBtn) addTaskBtn.addEventListener('click', addTask);

    // ‚å®Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ENTER
    if (workerNameInput) {
        workerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') addWorker();
        });
    }

    if (taskNameInput) {
        taskNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') addTask();
        });
    }

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
    if (distributeBtn) {
        distributeBtn.addEventListener('click', function() {
            if (workers.length === 0 || tasks.length === 0) {
                alert('Add workers and tasks first!');
                return;
            }

            fetch('/api/distribute')
                .then(response => response.json())
                .then(results => {
                    displayResults(results);
                })
                .catch(error => {
                    alert('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ' + error);
                });
        });
    }
});