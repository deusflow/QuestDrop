
// –ú–∞—Å—Å–∏–≤—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
let workers = []; // –†–∞–±–æ—Ç–Ω–∏–∫–∏ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Go —Å–µ—Ä–≤–µ—Ä–æ–º)
let tasks = [];   // –ó–∞–¥–∞–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è —Å Go —Å–µ—Ä–≤–µ—Ä–æ–º)

// ============ –ü–û–õ–£–ß–ï–ù–ò–ï DOM –≠–õ–ï–ú–ï–ù–¢–û–í ============
const workerNameInput = document.getElementById('worker-name');
const addWorkerBtn = document.getElementById('add-worker');
const workersListDiv = document.getElementById('workers-list');

const taskNameInput = document.getElementById('task-name');
const addTaskBtn = document.getElementById('add-task');
const tasksListDiv = document.getElementById('tasks-list');

const distributeBtn = document.getElementById('distribute-tasks');
const resultsDiv = document.getElementById('results');

// ============ –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ============

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
function loadWorkers() {
    fetch('/api/workers')
        .then(response => response.json())
        .then(data => {
            workers = data || [];  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            renderWorkersList();   // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        })
        .catch(error => {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        });
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π —Å —Å–µ—Ä–≤–µ—Ä–∞
function loadTasks() {
    fetch('/api/tasks')
        .then(response => response.json())
        .then(data => {
            tasks = data || [];  // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π
            renderTasksList();   // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        })
        .catch(error => {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
        });
}


// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞
function addWorker() {
    const name = workerNameInput.value.trim();
    
    if (name === '') {
        alert('Please enter worker name!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ Go —Å–µ—Ä–≤–µ—Ä
    fetch('/api/workers', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({name: name})
    })
    .then(response => response.json())
    .then(worker => {
        workerNameInput.value = '';  // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        loadWorkers();              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    })
    .catch(error => {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–Ω–∏–∫–∞!');
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
function addTask() {
    const description = taskNameInput.value.trim();
    
    if (description === '') {
        alert('Please enter task description!');
        return;
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å –Ω–∞ Go —Å–µ—Ä–≤–µ—Ä
    fetch('/api/tasks', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({description: description})
    })
    .then(response => response.json())
    .then(task => {
        taskNameInput.value = '';
        loadTasks();
    })
    .catch(error => {
        alert('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è!');
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –≤ HTML
function renderWorkersList() {
    workersListDiv.innerHTML = '';

    workers.forEach((worker, index) => {
        const workerDiv = document.createElement('div');
        workerDiv.className = 'list-item';
        const workerName = typeof worker === 'string' ? worker : worker.name;
        workerDiv.innerHTML = `
            <span>üë§ ${workerName}</span>
            <button onclick="removeWorker(${index})" style="float: right; background: none; border: none; cursor: pointer;">‚ùå</button>
        `;
        workersListDiv.appendChild(workerDiv);
    });
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π –≤ HTML
function renderTasksList() {
    tasksListDiv.innerHTML = '';

    tasks.forEach((task, index) => {
        const taskDiv = document.createElement('div');
        taskDiv.className = 'list-item';
        taskDiv.innerHTML = `
            <span>üìã ${typeof task === 'string' ? task : task.description}</span>
            <button onclick="removeTask(${index})" style="float: right; background: none; border: none; cursor: pointer;">‚ùå</button>
        `;
        tasksListDiv.appendChild(taskDiv);
    });
}

// –§—É–Ω–∫—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤)
function removeWorker(index) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å DELETE –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    alert('–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ!');
}

function removeTask(index) {
    // TODO: –î–æ–±–∞–≤–∏—Ç—å DELETE –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
    alert('–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ!');
}


// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
function displayResults(results) {
    resultsDiv.innerHTML = '';
    
    if (results.length === 0) {
        resultsDiv.innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è</p>';
        return;
    }
    
    resultsDiv.innerHTML = '<h3>üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:</h3>';
    
    results.forEach(result => {
        const resultDiv = document.createElement('div');
        resultDiv.className = 'result-item';
        resultDiv.style.marginBottom = '15px';
        resultDiv.style.padding = '10px';
        resultDiv.style.border = '1px solid #ddd';
        resultDiv.style.borderRadius = '5px';
        
        const tasksHtml = result.tasks.map(task => `<li>${task}</li>`).join('');
        
        resultDiv.innerHTML = `
            <h4>üë§ ${result.worker_name}</h4>
            <p><strong>–ó–∞–¥–∞–Ω–∏–π: ${result.tasks.length}</strong></p>
            <ul>${tasksHtml}</ul>
        `;
        
        resultsDiv.appendChild(resultDiv);
    });
}

// –ó–∞–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –∫–ª–∞—Å—Å AdvancedSakuraPetals –Ω–∞ —ç—Ç–æ—Ç:
class AdvancedSakuraPetals {
    constructor() {
        this.container = this.createContainer();
        this.petals = [];
        this.maxPetals = 15;
        this.mouseX = 0;
        this.mouseY = 0;
        this.lastMouseTime = 0;
        this.isEnabled = true; // –ù–û–í–û–ï –°–í–û–ô–°–¢–í–û - –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ –ª–µ–ø–µ—Å—Ç–∫–∏
        
        this.initMouseTracking();
        this.initToggleButton(); // –ù–û–í–´–ô –ú–ï–¢–û–î
    }
    
    createContainer() {
        const container = document.createElement('div');
        container.className = 'sakura-petals';
        document.body.appendChild(container);
        return container;
    }
    
    // –ù–û–í–´–ô –ú–ï–¢–û–î - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏
    initToggleButton() {
        const toggleBtn = document.getElementById('sakura-toggle');
        if (toggleBtn) {
            toggleBtn.addEventListener('click', () => {
                this.togglePetals();
            });
        }
    }
    
    // –ù–û–í–´–ô –ú–ï–¢–û–î - –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ª–µ–ø–µ—Å—Ç–∫–æ–≤
    togglePetals() {
        this.isEnabled = !this.isEnabled;
        const toggleBtn = document.getElementById('sakura-toggle');
        
        if (this.isEnabled) {
            // –í–∫–ª—é—á–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
            toggleBtn.classList.remove('disabled');
            toggleBtn.textContent = 'üå∏';
            toggleBtn.title = '–í—ã–∫–ª—é—á–∏—Ç—å –ª–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã';
            console.log('üå∏ –õ–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã');
        } else {
            // –í—ã–∫–ª—é—á–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏
            toggleBtn.classList.add('disabled');
            toggleBtn.textContent = 'üö´';
            toggleBtn.title = '–í–∫–ª—é—á–∏—Ç—å –ª–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã';
            this.clearAllPetals(); // —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ª–µ–ø–µ—Å—Ç–∫–∏
            console.log('üö´ –õ–µ–ø–µ—Å—Ç–∫–∏ —Å–∞–∫—É—Ä—ã –≤—ã–∫–ª—é—á–µ–Ω—ã');
        }
    }
    
    // –ù–û–í–´–ô –ú–ï–¢–û–î - –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ª–µ–ø–µ—Å—Ç–∫–æ–≤
    clearAllPetals() {
        this.petals.forEach(petal => {
            if (petal && petal.parentNode) {
                petal.parentNode.removeChild(petal);
            }
        });
        this.petals = [];
    }
    
    initMouseTracking() {
        document.addEventListener('mousemove', (e) => {
            // –ü–†–û–í–ï–†–Ø–ï–ú, –í–ö–õ–Æ–ß–ï–ù–´ –õ–ò –õ–ï–ü–ï–°–¢–ö–ò
            if (!this.isEnabled) return;
            
            this.mouseX = e.clientX;
            this.mouseY = e.clientY;
            
            const now = Date.now();
            if (now - this.lastMouseTime > 80) {
                if (Math.random() < 0.35) {
                    this.createPetal(e.clientX, e.clientY);
                }
                this.lastMouseTime = now;
            }
        });
    }
    
    createPetal(x, y) {
        // –î–í–û–ô–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê - –Ω–µ —Å–æ–∑–¥–∞–µ–º –ª–µ–ø–µ—Å—Ç–∫–∏ –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã
        if (!this.isEnabled) return;
        
        if (this.petals.length >= this.maxPetals) {
            const oldPetal = this.petals.shift();
            if (oldPetal && oldPetal.parentNode) {
                oldPetal.parentNode.removeChild(oldPetal);
            }
        }
        
        const petal = document.createElement('div');
        petal.className = 'sakura-petal';
        
        const types = ['type-1', 'type-2', 'type-3', 'type-4'];
        const randomType = types[Math.floor(Math.random() * types.length)];
        petal.classList.add(randomType);
        
        petal.style.left = (x + Math.random() * 30 - 15) + 'px';
        petal.style.top = (y + Math.random() * 30 - 15) + 'px';
        
        const randomX = (Math.random() - 0.5) * 120;
        const randomY = Math.random() * 80 + 40;
        const finalX = randomX + (Math.random() - 0.5) * 60;
        const finalY = randomY + Math.random() * 100;
        
        petal.style.setProperty('--random-x', randomX + 'px');
        petal.style.setProperty('--random-y', randomY + 'px');
        petal.style.setProperty('--final-x', finalX + 'px');
        petal.style.setProperty('--final-y', finalY + 'px');
        
        this.container.appendChild(petal);
        this.petals.push(petal);
        
        setTimeout(() => {
            if (petal.parentNode) {
                petal.parentNode.removeChild(petal);
                const index = this.petals.indexOf(petal);
                if (index > -1) {
                    this.petals.splice(index, 1);
                }
            }
        }, 4000);
    }
}




// ============ –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ============
// –ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ DOMContentLoaded –Ω–∞ –æ–¥–∏–Ω:
document.addEventListener('DOMContentLoaded', function() {
    // üå∏ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –õ–ï–ü–ï–°–¢–ö–û–í –°–ê–ö–£–†–´
    new AdvancedSakuraPetals();
    
    // üìù –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–ï–ß–ê–¢–ù–û–ô –ú–ê–®–ò–ù–ö–ò
    const subtitle = document.getElementById('typing-subtitle');
    if (subtitle) {
        const text = subtitle.textContent;
        subtitle.innerHTML = '';
        subtitle.classList.add('typing');
        
        text.split('').forEach((char, index) => {
            const span = document.createElement('span');
            span.textContent = char === ' ' ? '\u00A0' : char;
            span.className = 'letter';
            span.style.animationDelay = `${index * 80}ms`;
            subtitle.appendChild(span);
        });
        
        setTimeout(() => {
            subtitle.classList.remove('typing');
        }, text.length * 80 + 1000);
    }
    
    // üîÑ –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
    loadWorkers();
    loadTasks();

    // üîò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö
    if (addWorkerBtn) addWorkerBtn.addEventListener('click', addWorker);
    if (addTaskBtn) addTaskBtn.addEventListener('click', addTask);

    // ‚å®Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ENTER
    if (workerNameInput) {
        workerNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') addWorker();
        });
    }

    if (taskNameInput) {
        taskNameInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') addTask();
        });
    }

    // üéØ –û–ë–†–ê–ë–û–¢–ß–ò–ö –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
    if (distributeBtn) {
        distributeBtn.addEventListener('click', function() {
            if (workers.length === 0 || tasks.length === 0) {
                alert('Add workers and tasks first!');
                return;
            }
            
            fetch('/api/distribute')
                .then(response => response.json())
                .then(results => {
                    displayResults(results);
                })
                .catch(error => {
                    alert('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ' + error);
                });
        });
    }
});