package main

import (
	"fmt"
	"log"
	"net/http"
	"os"

	"questdrop/handlers"
)

func main() {
	fmt.Println("üå∏ QuestDrop —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è... ‚ú®")

	//—Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –æ—Ç–¥–∞–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ "static",http.Dir("./static/") –≥–æ–≤–æ—Ä–∏—Ç "–∏—â–∏ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ static"
	fs := http.FileServer(http.Dir("./static/"))

	// Health check endpoint –¥–ª—è Render
	http.HandleFunc("/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte("OK"))
	})

	// API —Ä–æ—É—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
	http.HandleFunc("/api/workers/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Printf("üîç WORKERS: %s %s\n", r.Method, r.URL.Path)
		if r.Method == "GET" {
			handlers.GetWorkers(w, r)
		} else if r.Method == "POST" {
			handlers.AddWorker(w, r)
		} else if r.Method == "DELETE" {
			handlers.DeleteWorker(w, r)
		}
	})

	http.HandleFunc("/api/workers/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == "DELETE" {
			handlers.DeleteWorker(w, r)
		}
	})

	// API —Ä–æ—É—Ç—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏–π
	http.HandleFunc("/api/tasks/", func(w http.ResponseWriter, r *http.Request) {
		fmt.Printf("üîç TASKS: %s %s\n", r.Method, r.URL.Path)
		if r.Method == "GET" {
			handlers.GetTasks(w, r)
		} else if r.Method == "POST" {
			handlers.AddTask(w, r)
		} else if r.Method == "DELETE" {
			handlers.DeleteTask(w, r)
		}
	})

	http.HandleFunc("/api/tasks/", func(w http.ResponseWriter, r *http.Request) {
		if r.Method == "DELETE" {
			handlers.DeleteTask(w, r)
		}
	})

	// –†–æ—É—Ç –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
	http.HandleFunc("/api/distribute", handlers.DistributeTasks)

	http.Handle("/", fs)

	fmt.Println("üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ http://localhost:8080")
	fmt.Println("üíñ –ì–æ—Ç–æ–≤ –∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –∑–∞–¥–∞–Ω–∏–π!")

	// –î–µ–ª–∞–µ–º –≥–∏–±–∫–∏–π –ø–æ—Ä—Ç (—Ö–æ—Å—Ç–∏–Ω–≥ —Å–∞–º –Ω–∞–∑–Ω–∞—á–∏—Ç –ø–æ—Ä—Ç)
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // –ª–æ–∫–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 8080
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç–æ–º
	fmt.Printf("üöÄ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É %s\n", port)
	fmt.Printf("üîç –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT: %s\n", os.Getenv("PORT"))
	fmt.Printf("üåê –°–ª—É—à–∞–µ–º –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö: 0.0.0.0:%s\n", port)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –ø–æ—Ä—Ç–æ–º
	err := http.ListenAndServe(":"+port, nil)
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err)
	}
}
